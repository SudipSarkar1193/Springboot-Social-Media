## Azure SQL Datasource
#spring.datasource.url=${DATA_SRC_URL};encrypt=true;trustServerCertificate=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;
#spring.datasource.username=${DB_USERNAME}
#spring.datasource.password=${DB_PASSWORD}
#spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#
## Hibernate / JPA
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.show-sql=false

## ===============================
## MySQL Datasource Configuration
## ===============================
#spring.datasource.url=jdbc:mysql://localhost:3306/xplore_db
#
## Your MySQL username and password
#spring.datasource.username=root
#spring.datasource.password=root
#
## This tells Hibernate to generate MySQL-specific SQL commands
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#
## --- Keep these settings as they are ---
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.session.store-type=jdbc
#spring.session.jdbc.initialize-schema=always


# ----------------------------
# PostgreSQL DataSource Config
# ----------------------------

# JDBC URL to connect to the Neon serverless PostgreSQL
# Use an environment variable so sensitive info (host, db name) is not hard-coded
# sslmode=require ensures an encrypted connection to the database
# channelBinding=require is required for Neon serverless PostgreSQL connections
spring.datasource.url=${DATA_SRC_URL}

# Database username loaded from environment variable
# This should match the Neon database user
spring.datasource.username=${PGUSER}

# Database password loaded from environment variable
spring.datasource.password=${PGPASSWORD}

# PostgreSQL JDBC driver class required for Spring Boot to connect
spring.datasource.driver-class-name=org.postgresql.Driver

# ----------------------------
# Hikari Connection Pool Settings
# ----------------------------

# Maximum number of connections in the pool
# Serverless Postgres doesn't handle many idle connections well, so keep it low
spring.datasource.hikari.maximum-pool-size=3

# Minimum number of idle connections maintained in the pool
spring.datasource.hikari.minimum-idle=1

# Maximum time (ms) that a connection can sit idle before being removed
# Short idle timeout avoids stale connections in serverless environments
spring.datasource.hikari.idle-timeout=10000

# Maximum lifetime (ms) of a connection in the pool before being recycled
# Serverless Postgres may close long-lived connections; keep it low
spring.datasource.hikari.max-lifetime=30000

# Maximum time (ms) to wait for a connection from the pool before timing out
spring.datasource.hikari.connection-timeout=30000

# ----------------------------
# Hibernate / JPA Config
# ----------------------------

# Specify PostgreSQL dialect for Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Validate schema at startup (don't update automatically)
# Ensures your entity classes match the DB schema
spring.jpa.hibernate.ddl-auto=validate

# Critical fix for serverless PostgreSQL
# Disables Hibernate statement cache to prevent errors with ephemeral connections
spring.jpa.properties.hibernate.statement_cache.size=0

# ----------------------------
# Debugging / SQL Logging
# ----------------------------

# Disable SQL logging by default
spring.jpa.show-sql=false

# Enable Hibernate SQL logging at DEBUG level
#logging.level.org.hibernate.SQL=DEBUG

# Enable JDBC datasource logging at DEBUG level
logging.level.org.springframework.jdbc.datasource=DEBUG

